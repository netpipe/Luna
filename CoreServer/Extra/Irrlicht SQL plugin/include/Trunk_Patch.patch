Index: IFileSystem.h
===================================================================
--- IFileSystem.h	(revision 1286)
+++ IFileSystem.h	(working copy)
@@ -101,7 +101,28 @@
 	without its complete path.(should not use with Quake2 paks
 	\return Returns true if the archive was added successful, false if not. */
 	virtual bool addPakFileArchive(const c8* filename, bool ignoreCase = true, bool ignorePaths = true) = 0;
-
+	//Caswal
+		//! Adds a SQLite database to the file system.
+	/** After calling this, the Irrlicht Engine will search and open files directly from this archive too. 
+	 This is useful for hiding data from the end user, speeding up file access and making it possible to
+	 to encrypt your data.
+	\param filename: Filename of the pak archive to add to the file system.
+	\param ignorePaths: If set to true, files in the added archive can be accessed
+	without its complete path.(should not use with Quake2 paks
+	\param encryptKey: Is a key the data within the arcieve has been encrypted with.
+	\return Returns true if the archive was added successful, false if not. */
+	virtual bool addSQLiteDatabase(const c8* filename, bool ignoreCase = true, bool ignorePaths = true, const u32* encryptKey = 0) = 0;
+	//! Adds a SQLite database to the file system.
+	/** After calling this, the Irrlicht Engine will search and open files directly from this archive too. 
+	 This is useful for hiding data from the end user, speeding up file access and making it possible to
+	 to encrypt your data.
+	\param filename: Filename of the pak archive to add to the file system.
+	\param KeyGenFunc: Is a function pointer to a function that should procederally generate a 128bit key stored in 4x32bit unsigned ints
+	\param ignorePaths: If set to true, files in the added archive can be accessed
+	without its complete path.(should not use with Quake2 paks
+	\return Returns true if the archive was added successful, false if not. */
+	virtual bool addSQLiteDatabase(const c8* filename,const u32* (*KeyGenFunc)(void), bool ignoreCase = true, bool ignorePaths = true) = 0;
+	
 	//! Returns the string of the current working directory.
 	virtual const c8* getWorkingDirectory() = 0;
 
