#################################
##  _
## | |
## | |    _   _ _ __   __ _
## | |   | | | | '_ \ / _` |
## | |___| |_| | | | | (_| |
## |______\__,_|_| |_|\__,_|
##    Luna Game Engine
#################################
##Title: Minimalist example
#checking cpu usage
#
#################################
##INITIALIZE
##called externally so it is set from functions.py or init.py
#################################
if(init):
    import irr
    import scene
    import input
    import image
    import time

#################################
    init = 0 #initialization finish - needs whitespace infront
#################################
##MAIN LOOP gets ran everytime
#################################


    scene.using ('../media/lib/random.py',"1")
    myr.time_reseed();
    
    scene.using ('../media/lib/enc/rsa.py',"1");
    plain = "Hello World!"
    
    # e, n, p, q generated by python-rsa from http://stuvel.eu/rsa
    e = '10001'
    n = '483843201aaecd6a67ee700d017294e30372ce0c4f73c505ea1409367cc33d4517cb2b118da9a8242453a90e40db83b6cd011fbe19309781a5b0522dbd043959'
    
    # d calculated using e, p, q by codes from http://en.wikipedia.org/wiki/Modular_multiplicative_inverse#Practical_Implementation_in_Python
    d = '3edbc9811df85b8e6bdb9ae79704f616092059bb5944388e8748dd23f1beec180a44f1fdff67c08670b27e0253e1460c4651d685421e6007af37f1c4118a64a1'
    result_encrypt = encrypt(plain, e, n)
    got = decrypt(result_encrypt, d, n)
    
    
if input.getKey('KEY_ESCAPE') :
 irr.exit()

irr.delay(200000)
